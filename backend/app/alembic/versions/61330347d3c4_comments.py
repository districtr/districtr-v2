"""comments

Revision ID: 61330347d3c4
Revises: c859c1ba61a0
Create Date: 2025-08-06 10:06:55.241491

"""

from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from app.constants import SQL_DIR


# revision identifiers, used by Alembic.
revision: str = "61330347d3c4"
down_revision: Union[str, None] = "c859c1ba61a0"
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    op.execute(sa.text("CREATE SCHEMA IF NOT EXISTS comments"))

    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "commenter",
        sa.Column(
            "created_at",
            sa.TIMESTAMP(timezone=True),
            server_default=sa.text("CURRENT_TIMESTAMP"),
            nullable=False,
        ),
        sa.Column(
            "updated_at",
            sa.TIMESTAMP(timezone=True),
            server_default=sa.text("CURRENT_TIMESTAMP"),
            nullable=False,
        ),
        sa.Column("id", sa.Integer(), autoincrement=True, nullable=False),
        sa.Column("first_name", sa.String(length=255), nullable=False),
        sa.Column("email", sa.String(length=320), nullable=False),
        sa.Column("salutation", sa.String(length=255), nullable=True),
        sa.Column("last_name", sa.String(length=255), nullable=True),
        sa.Column("place", sa.String(length=255), nullable=True),
        sa.Column("state", sa.String(length=255), nullable=True),
        sa.Column("zip_code", sa.String(length=255), nullable=True),
        sa.CheckConstraint(
            "email ~* '^[a-zA-Z0-9.!#$%%&''*+/=?^_`{|}~-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*$'",
            name="valid_email_format",
        ),
        sa.CheckConstraint("LENGTH(TRIM(email)) > 0", name="email_not_empty"),
        sa.CheckConstraint("LENGTH(TRIM(first_name)) > 0", name="first_name_not_empty"),
        sa.PrimaryKeyConstraint("id"),
        sa.UniqueConstraint(
            "first_name", "email", name="commenter_unique_on_first_name_and_email"
        ),
        schema="comments",
    )
    op.create_index(
        "idx_commenter_first_name_and_email",
        "commenter",
        [sa.text("lower(trim(first_name))"), sa.text("lower(trim(email))")],
        unique=False,
        schema="comments",
    )
    op.create_index(
        op.f("ix_comments_commenter_id"),
        "commenter",
        ["id"],
        unique=True,
        schema="comments",
    )
    op.create_table(
        "comment",
        sa.Column(
            "created_at",
            sa.TIMESTAMP(timezone=True),
            server_default=sa.text("CURRENT_TIMESTAMP"),
            nullable=False,
        ),
        sa.Column(
            "updated_at",
            sa.TIMESTAMP(timezone=True),
            server_default=sa.text("CURRENT_TIMESTAMP"),
            nullable=False,
        ),
        sa.Column("id", sa.Integer(), autoincrement=True, nullable=False),
        sa.Column("title", sa.String(length=255), nullable=False),
        sa.Column("comment", sa.String(length=5000), nullable=False),
        sa.Column("commenter_id", sa.Integer(), nullable=True),
        sa.ForeignKeyConstraint(
            ["commenter_id"],
            ["comments.commenter.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
        schema="comments",
    )
    op.create_index(
        op.f("ix_comments_comment_commenter_id"),
        "comment",
        ["commenter_id"],
        unique=False,
        schema="comments",
    )
    op.create_index(
        op.f("ix_comments_comment_id"),
        "comment",
        ["id"],
        unique=True,
        schema="comments",
    )
    op.create_table(
        "tag",
        sa.Column(
            "created_at",
            sa.TIMESTAMP(timezone=True),
            server_default=sa.text("CURRENT_TIMESTAMP"),
            nullable=False,
        ),
        sa.Column(
            "updated_at",
            sa.TIMESTAMP(timezone=True),
            server_default=sa.text("CURRENT_TIMESTAMP"),
            nullable=False,
        ),
        sa.Column("id", sa.Integer(), autoincrement=True, nullable=False),
        sa.Column("slug", sa.String(length=255), nullable=False),
        sa.PrimaryKeyConstraint("id"),
        schema="comments",
    )
    op.create_index(
        op.f("ix_comments_tag_id"), "tag", ["id"], unique=True, schema="comments"
    )
    op.create_index(
        op.f("ix_comments_tag_slug"), "tag", ["slug"], unique=True, schema="comments"
    )
    op.create_table(
        "comment_tag",
        sa.Column("comment_id", sa.Integer(), nullable=False),
        sa.Column("tag_id", sa.Integer(), nullable=False),
        sa.ForeignKeyConstraint(
            ["comment_id"],
            ["comments.comment.id"],
        ),
        sa.ForeignKeyConstraint(
            ["tag_id"],
            ["comments.tag.id"],
        ),
        sa.PrimaryKeyConstraint("comment_id", "tag_id"),
        sa.UniqueConstraint("comment_id", "tag_id", name="unique_comment_tag_link"),
        schema="comments",
    )
    # ### end Alembic commands ###

    # Normalize email
    with open(SQL_DIR / "normalize_email.sql", "r") as f:
        op.execute(sa.text(f.read()))

    op.execute(
        sa.text("""
        CREATE TRIGGER normalize_email_trigger
            BEFORE INSERT OR UPDATE ON comments.commenter
            FOR EACH ROW EXECUTE FUNCTION normalize_email();
    """)
    )

    # Sluggify tags
    with open(SQL_DIR / "slugify_tag.sql", "r") as f:
        op.execute(sa.text(f.read()))


def downgrade() -> None:
    op.execute(sa.text("DROP FUNCTION IF EXISTS slugify_tag"))
    op.execute(
        sa.text("DROP TRIGGER IF EXISTS normalize_email_trigger ON comments.commenter")
    )
    op.execute(sa.text("DROP FUNCTION IF EXISTS normalize_email"))

    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table("comment_tag", schema="comments")
    op.drop_index(op.f("ix_comments_tag_slug"), table_name="tag", schema="comments")
    op.drop_index(op.f("ix_comments_tag_id"), table_name="tag", schema="comments")
    op.drop_table("tag", schema="comments")
    op.drop_index(
        op.f("ix_comments_comment_id"), table_name="comment", schema="comments"
    )
    op.drop_index(
        op.f("ix_comments_comment_commenter_id"),
        table_name="comment",
        schema="comments",
    )
    op.drop_table("comment", schema="comments")
    op.drop_index(
        op.f("ix_comments_commenter_id"), table_name="commenter", schema="comments"
    )
    op.drop_index(
        "idx_commenter_first_name_and_email", table_name="commenter", schema="comments"
    )
    op.drop_table("commenter", schema="comments")
    # ### end Alembic commands ###

    op.execute(sa.text("DROP SCHEMA IF EXISTS comments"))
