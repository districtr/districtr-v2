"""add extent to gerrydb

Revision ID: dc391733e10a
Revises: 5ab466c5650a
Create Date: 2024-10-27 12:22:30.468315

"""

from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from app.models import GerryDBTable

# revision identifiers, used by Alembic.
revision: str = "dc391733e10a"
down_revision: Union[str, None] = "5ab466c5650a"
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    # Make column nullable to avoid errors during initial insert
    op.add_column(
        "gerrydbtable", sa.Column("extent", sa.ARRAY(sa.Float()), nullable=True)
    )

    # Use a session to interact with the database
    bind = op.get_bind()
    Session = sa.orm.sessionmaker(bind=bind)
    session = Session()

    # Step 1: Retrieve all table names from public.gerrydbtable
    table_names = session.execute(sa.select(GerryDBTable.name)).scalars().all()

    if not table_names:
        raise ValueError("No matching table names found in the index table")

    def column_exists(table_name, column_name):
        column_check_query = sa.text(
            f"""
            SELECT EXISTS (
                SELECT 1
                FROM information_schema.columns
                WHERE table_schema = 'gerrydb'
                AND table_name = :table_name
                AND column_name = :column_name
            )
        """
        )
        result = bind.execute(
            column_check_query, {"table_name": table_name, "column_name": column_name}
        ).scalar()
        return result

    cases = []
    for table_name in table_names:
        has_geometry = column_exists(table_name, "geometry")
        has_geography = column_exists(table_name, "geography")

        if has_geometry:
            geom_column = "geometry"
        elif has_geography:
            geom_column = "geography"
        # Add the CASE statement with the correct column name

        if has_geometry or has_geography:
            case = f"""
            WHEN name = '{table_name}' THEN (
                SELECT
                    ARRAY[
                        ST_XMin(ST_Extent(ST_Transform({geom_column}, 4326))),
                        ST_YMin(ST_Extent(ST_Transform({geom_column}, 4326))),
                        ST_XMax(ST_Extent(ST_Transform({geom_column}, 4326))),
                        ST_YMax(ST_Extent(ST_Transform({geom_column}, 4326)))
                    ]
                FROM gerrydb."{table_name}"
            )
            """

        else:
            # just skip for now and return generic placeholder array
            print(f"No geometry or geography column found in table '{table_name}'.")
            case = f"""
            WHEN name = '{table_name}' THEN ARRAY[0, 0, 0, 0]
            """
        cases.append(case)

    # Combine all cases into a single SQL statement
    case_statement = " ".join(cases)

    # Execute a single UPDATE statement
    update_query = sa.text(
        f"""
        UPDATE gerrydbtable
        SET extent = CASE
            {case_statement}
            ELSE extent  -- Leave unchanged if no match; this should never happen
        END;
    """
    )

    bind.execute(update_query)

    # Make the `extent` column non-nullable
    op.alter_column(
        "gerrydbtable", "extent", existing_type=sa.ARRAY(sa.Float()), nullable=False
    )

    session.commit()


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_column("gerrydbtable", "extent")
    # ### end Alembic commands ###
