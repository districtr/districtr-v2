name: Fly Deploy Disctictr V2 PR
on:
    pull_request:
        types: [opened, reopened, synchronize, closed]
env:
    FLY_API_TOKEN: ${{ secrets.FLY_ORG_TOTKEN }}
    SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}
    FLY_REGION: "iad"
    FLY_ORG: "mggg"
jobs:
    pr_review_app:
        runs-on: ubuntu-latest

        concurrency:
            group: pr-${{ github.event.number }}

        environment:
            name: pr-${{ github.event.number }}
            # url: ${{ steps.deploy-app.outputs.url }}

        steps:
            - uses: actions/checkout@v3
            - uses: superfly/flyctl-actions/setup-flyctl@master
            
            
            # fork new db from existing db if it doesn't already exist
            - name: Fork From DB
              id: fork-db
              run: |              
                if flyctl postgres list | grep -q pr-${{ github.event.number }}-${{ github.repository_owner }}-${{ github.event.repository.name }}-db; then
                  echo "DB already exists"
                else              
                  flyctl postgres create \
                  --name pr-${{ github.event.number }}-${{ github.repository_owner }}-${{ github.event.repository.name }}-db \
                  --region ewr \
                  --initial-cluster-size 1 \
                  --vm-size shared-cpu-2x \
                  -p ${{ secrets.FLY_PR_PG_PASSWORD }} \
                  --org mggg \
                  --fork-from districtr-v2-db
                  
                  if [ $? -eq 0 ]; then
                    echo "Database created successfully."
                    echo "::set-output name=db_name::pr-${{ github.event.number }}-${{ github.repository_owner }}-${{ github.event.repository.name }}-db"
                    echo "::set-output name=db_password::$(flyctl postgres credentials pr-${{ github.event.number }}-${{ github.repository_owner }}-${{ github.event.repository.name }}-db | grep Password | awk '{print $2}')"
                    
                  else
                    echo "Failed to create database."
                    exit 1
                  fi
                fi

            # manually launch and deploy the api app
            - name: launch api app
              run: |
                app="pr-${{ github.event.number }}-${{ github.repository_owner }}-${{ github.event.repository.name }}-api"
                db_name="pr-${{ github.event.number }}-${{ github.repository_owner }}-${{ github.event.repository.name }}-db"
                config="fly.toml"
            
                # Check if the app exists
                if flyctl apps list | grep -q "$app"; then
                  echo "App $app already exists. Skipping launch."
                else
                  flyctl launch \
                  --no-deploy --copy-config --name "$app" \
                  --build-arg POSTGRES_SCHEME="postgresql+psycopg" \
                  --build-arg POSTGRES_SERVER="pr-${{ github.event.number }}-${{ github.repository_owner }}-${{ github.event.repository.name }}-db.flycast" \
                  --build-arg POSTGRES_USER="postgres" \
                  --build-arg POSTGRES_PASSWORD=${{steps.fork-db.outputs.db_password}} \
                  --build-arg POSTGRES_DB="districtr_v2_api" \
                  --build-secret POSTGRES_SCHEME="postgresql+psycopg" \
                  --build-secret POSTGRES_SERVER="pr-${{ github.event.number }}-${{ github.repository_owner }}-${{ github.event.repository.name }}-db.flycast" \
                  --build-secret POSTGRES_USER="postgres" \
                  --build-secret POSTGRES_PASSWORD="$db_password" \
                  --build-secret POSTGRES_DB="districtr_v2_api" \
                  --build-secret BACKEND_CORS_ORIGINS="https://pr-${{ github.event.number }}-${{ github.repository_owner }}-${{ github.event.repository.name }}-app.fly.dev,https://districtr-v2-frontend.fly.dev"
                  echo "App $app launched successfully."
                fi
                # Output app name for use in the deploy step
                echo "api_app_name=$app" >> $GITHUB_ENV
              working-directory: backend

            - name: deploy api app
              run: |
                    flyctl deploy \
                    --config fly.toml --app "pr-${{ github.event.number }}-${{ github.repository_owner }}-${{ github.event.repository.name }}-api" \
                    --strategy immediate '--ha=false' --vm-cpu-kind shared --vm-cpus 1 --vm-memory 256                   

                    flyctl secrets set \
                    -a pr-${{ github.event.number }}-${{ github.repository_owner }}-${{ github.event.repository.name }}-api \
                    POSTGRES_SCHEME="postgresql+psycopg" \
                    POSTGRES_SERVER="pr-${{ github.event.number }}-${{ github.repository_owner }}-${{ github.event.repository.name }}-db.flycast" \
                    POSTGRES_USER="postgres" \
                    POSTGRES_PASSWORD=${{ secrets.FLY_PR_PG_PASSWORD }} \
                    POSTGRES_DB="districtr_v2_api" \
                    BACKEND_CORS_ORIGINS="https://pr-${{ github.event.number }}-${{ github.repository_owner }}-${{ github.event.repository.name }}-app.fly.dev,https://districtr-v2-frontend.fly.dev" \
                    DATABASE_URL="postgresql://postgres:${{ secrets.FLY_PR_PG_PASSWORD }}@${{ steps.fork-db.outputs.db_name }}.flycast:5432/districtr_v2_api?sslmode=disable&options=-csearch_path%3Dpublic"

                    echo "set $app secrets"
              working-directory: backend

            - name: Check and Launch Frontend App
              id: launch
              run: |
                app="pr-${{ github.event.number }}-${{ github.repository_owner }}-${{ github.event.repository.name }}-app"
                api_app="pr-${{ github.event.number }}-${{ github.repository_owner }}-${{ github.event.repository.name }}-api"
                config="fly.toml"
            
                # Check if the app exists
                if flyctl apps list | grep -q "$app"; then
                  echo "App $app already exists. Skipping launch."
                else
                  echo "Launching app $app."
                  # Run the flyctl launch command
                  flyctl launch \
                  --no-deploy --copy-config --name "$app" \
                  --build-arg NEXT_PUBLIC_API_URL="$api_app" \
                  --build-arg NEXT_PUBLIC_S3_BUCKET_URL=${{ secrets.NEXT_PUBLIC_S3_BUCKET_URL }} \
                  --build-secret NEXT_PUBLIC_API_URL="$api_app" \
                  --build-secret NEXT_PUBLIC_S3_BUCKET_URL=${{ secrets.NEXT_PUBLIC_S3_BUCKET_URL }}
            
                  echo "App $app launched successfully."
                fi
            
                # Output app name for use in the deploy step
                echo "frontend_app_name=$app" >> $GITHUB_ENV
              working-directory: app
          
            - name: Deploy Frontend App
              run: |
                app_name="pr-${{ github.event.number }}-${{ github.repository_owner }}-${{ github.event.repository.name }}-app"
                config="fly.toml"
            
                # Deploy the app
                flyctl deploy --config "$config" --app "$app_name" \
                --strategy immediate '--ha=false' \
                --vm-cpu-kind shared --vm-cpus 1 --vm-memory 256
              working-directory: app
          
            # set secrets for app
            - name: Set App Secrets
              run: |
                app_name="pr-${{ github.event.number }}-${{ github.repository_owner }}-${{ github.event.repository.name }}-app"
                api_app="pr-${{ github.event.number }}-${{ github.repository_owner }}-${{ github.event.repository.name }}-api"
                flyctl secrets set \
                -a "$app_name" \
                NEXT_PUBLIC_API_URL="$api_app" \
                NEXT_PUBLIC_S3_BUCKET_URL=${{secrets.NEXT_PUBLIC_S3_BUCKET_URL}} 


            # - name: run database migrations
            #   run: |
            #     flyctl ssh console --app "$api_app_name" --command "alembic upgrade head"
            #   working-directory: backend

            # provision appropriately, do not over-resource
            # teardown after done
            # make volume like two gb
            # if frontend only, only connect to stage db and stage api