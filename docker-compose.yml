services:
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile.dev
    container_name: backend
    volumes:
      - ./backend:/districtr-backend # Adjust volumes to point to the backend folder
      - ./sample_data:/districtr-backend/sample_data
      - ./data:/data
      - ./tmp:/tmp

    env_file:
      - ./backend/.env.docker # Ensure the env file is also from the backend folder
    depends_on:
      db:
        condition: service_healthy
    command: bash -c "
      alembic upgrade head && \
      if [ "${LOAD_DATA:-false}" = "true" ]; then python cli.py batch-create-districtr-maps --config-file=management/configs/geopackages_vap_and_election.yaml --data-dir=/data; fi && \
      uvicorn app.main:app --host 0.0.0.0 --port 8000 --reload --reload-exclude '.venv/**/*.py'
      "
    ports:
      - "8000:8000"

  db:
    build: ./db
    container_name: postgres_db
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: districtr
    volumes:
      - __postgres_data:/var/lib/postgresql/data
      - ./db/scripts:/docker-entrypoint-initdb.d
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      retries: 5

  frontend:
    build:
      context: ./app
      dockerfile: Dockerfile.dev
    container_name: frontend
    volumes:
      - ./app:/app # Mount the app folder for hot reloading
      - ./app/node_modules:/app/node_modules # Bind mount for node_modules

    env_file:
      - ./app/.env.docker
    ports:
      - "3000:3000" # Expose Next.js on port 3000
    command: sh -c "npm install && npm run dev"

  pre-commit:
    build:
      context: ./pre-commit
      dockerfile: Dockerfile.dev
    volumes:
      - ./:/app
    command: sh -c "pip install pre-commit && pre-commit run --all-files"

  pipelines:
    build:
      context: ./pipelines
      dockerfile: Dockerfile
    command: sh -c "pip install '.[test]' && pip install -e ."
    volumes:
      - ./pipelines:/app
      - ./data:/data
      - ./tmp:/tmp
    env_file:
      - ./pipelines/.env

volumes:
  __postgres_data:
